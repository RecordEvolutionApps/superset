#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# -----------------------------------------------------------------------
# We don't support docker compose for production environments.
# If you choose to use this type of deployment make sure to
# create you own docker environment file (.env) with your own
# unique random secure passwords and SECRET_KEY.
# -----------------------------------------------------------------------
x-superset-image: &superset-image apachesuperset.docker.scarf.sh/apache/superset:4.1.2
x-superset-volumes:
  &superset-volumes # /app/pythonpath_docker will be appended to the PYTHONPATH in the final container
  # - ./docker:/app/docker
  - superset_home:/app/superset_home

x-common-build: &common-build
  context: .
  target: ${SUPERSET_BUILD_TARGET:-lean} # can use `dev` (default) or `lean`
  args:
    DEV_MODE: "false"
    INCLUDE_CHROMIUM: ${INCLUDE_CHROMIUM:-false}
    INCLUDE_FIREFOX: ${INCLUDE_FIREFOX:-false}
    BUILD_TRANSLATIONS: ${BUILD_TRANSLATIONS:-true}

services:
  redis:
    image: redis:7
    container_name: superset_cache
    restart: unless-stopped
    environment:
      - REDIS_PORT=6379
    volumes:
      - redis:/data

  db:
    # env_file:
    #   - path: docker/.env # default
    #     required: true
    environment:
      # database configurations (do not modify)
      - DATABASE_DB=superset
      - DATABASE_HOST=db
      # Make sure you set this to a unique secure random value on production
      - DATABASE_PASSWORD=superset
      - DATABASE_USER=superset
      - EXAMPLES_DB=examples
      - EXAMPLES_HOST=db
      - EXAMPLES_USER=examples
      # Make sure you set this to a unique secure random value on production
      - EXAMPLES_PASSWORD=examples
      - EXAMPLES_PORT=5432
      # database engine specific environment variables
      # change the below if you prefer another database engine
      - DATABASE_PORT=5432
      - DATABASE_DIALECT=postgresql
      - POSTGRES_DB=superset
      - POSTGRES_USER=superset
      # Make sure you set this to a unique secure random value on production
      - POSTGRES_PASSWORD=superset
    image: postgres:16
    container_name: superset_db
    restart: unless-stopped
    volumes:
      - db_home:/var/lib/postgresql/data
      - ./docker/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d

  superset:
    # env_file:
    #   - path: docker/.env # default
    #     required: true
    # image: *superset-image
    build:
      <<: *common-build
    container_name: superset_app
    command: ["/app/docker/docker-bootstrap.sh", "app-gunicorn"]
    user: "root"
    restart: unless-stopped
    ports:
      - 42936:42936
    # depends_on:
    #   superset-init:
    #     condition: service_completed_successfully
    volumes: *superset-volumes
    environment:
      SUPERSET_LOG_LEVEL: "${SUPERSET_LOG_LEVEL:-info}"

  superset-init:
    # image: *superset-image
    build:
      <<: *common-build
    container_name: superset_init
    command: ["/app/docker/docker-init.sh"]
    # env_file:
    #   - path: docker/.env # default
    #     required: true
    depends_on:
      db:
        condition: service_started
      redis:
        condition: service_started
    user: "root"
    volumes: *superset-volumes
    healthcheck:
      disable: true
    environment:
      SUPERSET_LOAD_EXAMPLES: "${SUPERSET_LOAD_EXAMPLES:-yes}"
      SUPERSET_LOG_LEVEL: "${SUPERSET_LOG_LEVEL:-info}"

  superset-worker:
    # image: *superset-image
    build:
      <<: *common-build
    container_name: superset_worker
    command: ["/app/docker/docker-bootstrap.sh", "worker"]
    restart: unless-stopped
    # depends_on:
    #   superset-init:
    #     condition: service_completed_successfully
    user: "root"
    volumes: *superset-volumes
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "celery -A superset.tasks.celery_app:app inspect ping -d celery@$$HOSTNAME",
        ]
    environment:
      SUPERSET_LOG_LEVEL: "${SUPERSET_LOG_LEVEL:-info}"

  superset-worker-beat:
    # image: *superset-image
    build:
      <<: *common-build
    container_name: superset_worker_beat
    command: ["/app/docker/docker-bootstrap.sh", "beat"]
    restart: unless-stopped
    # depends_on:
    #   superset-init:
    #     condition: service_completed_successfully
    user: "root"
    volumes: *superset-volumes
    healthcheck:
      disable: true
    environment:
      SUPERSET_LOG_LEVEL: "${SUPERSET_LOG_LEVEL:-info}"

volumes:
  superset_home:
  db_home:
  redis:
